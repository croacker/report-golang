go, principle of greatest astonishment

язык Go != не Go!
Если искать в интернете, лучше использовать golang

Что это
2009
компилируемый. кто пробовал kotlina native, scala native, graalvm?
сборщик мусора
процедурный, но с поддержкой интерфейсов
и с рефлексией
и с аннотациями, - для генерации кода
есть Тэги - метаинформация
со средствами функционального программирования(неименованные функции, замыкания, передача функций в параметрах и возврат функциональных значений)
многопоточный, средства параллельного программирования встроены в язык 
со строгой статической типизацией
с поддержкой указателей, но без возможности применять к ним арифметические операции. Пример
язык программирования

Чего нет
обработчиков исключений. Есть возврат ошибки. Это типа try catch, как реализован блок final?(ответ deferred)
Наследование реализации. и это очень круто, кода нет abstract
Обобщённое программирование(вместо этого пустые интерфейсы, «утиная типизация» и рефлексия). обещают что будет

Для чего подходит

Для чего не подходит


Релиз каждые пол года.

1.GOPATH

2. форматирование
gofmt

точки с запятой ставить можно, но компилятор ставит их автоматически. В связи с этим есть интересный момент
вот это не скомпилируется
func do()
{        
}
потому что получится
func do();
{        
}

3. Соглашений об использовании заглавных и строчных букв
В именах пакетов используются только строчные буквы. Все ключевые слова Go пишутся в нижнем регистре
имена которых начинаются на заглавную букву, являются экспортируемыми

4. Контроль использования.
Пакеты, переменные
если необходима интроспекция(как для jdbc), необходимо добавлять псевдопеременную "_" или псевдоним пакета "_"
 int != int32

5. Модули
go get
Ранее считалось вся экосистема разработки существует в виде единого файлового дерева. Какая здесь проблема? - версии.
go mod
С версии 1.11 началось развитие системы пакетов.

6. Указатели

7. Обработка ошибок, исключений и возврат нескольких значений из функции
https://habr.com/ru/post/269909/ - прочитать
defer не только final, но и способ в случае вызова panic вызвать recover
помните 

8. Многопоточность
communicating sequential processes, CSP
без жёсткой привязки к  ОС-потоками
chan - встроенный тип, почти generic. буферизованный/небуферизованный. проще всего воспринимать как shared memory
for-range при чтении из канала
можно использовать и обычную модель синхронизированного взаимодействия потоков через общую память. но если не использовать мьютексы, после компиляции, потоки могут начать работать с разными участками памяти и никогда не увидеть изменений.
планировщик, точки переключения - функции.

9.ООП
для структур и даже базовых типов можно объявить методы.
наследования нет, но есть встраивание(embedding) или примешивание, отличие - нет полиморфного поведения
полиморфизм обеспечивается интерфейсами. В Go нет необходимости явно указывать, что некоторый тип реализует определённый интерфейс. Вместо этого действует правило: каждый тип, предоставляющий методы, обозначенные в интерфейсе, может быть использован как реализация этого интерфейса. Для интерфейсов так же работает встраивание(embedding).
Построение иерархии интерфейсов считается плохой практикой.
Отсутствие явного указания на реализацию интерфейса типом затрудняет понимание кода

10.Рефлексия(reflect и unsafe)
определить тип
эквивалентность любых значений
изменять любые значения, например часть строки
исследование типа
вызов методов и ф-й

11.Компиляция


go, principles of greatest surprise
Основная цель доклада рассказать про подводные камни при переходе с Enterprise языков.

1. Введение.Кратко что такое Go, чем он отличается от Go!, зачем нужен и зачем не нужен.
2. Вещи которые помогут бросить изучение в самом начале
- GOPATH и другие 
- дилема var и :=
- отсутствие неизменяемости
- широкий выбор библиотек и компонентов версии 0.0.1
- удобство управления зависимостями
3. Соглашения как часть процесса разработки
- именование
- контроль использования
- формат исходного кода
4. Cи-образные и процедурность
- указатели
- обработка ошибок
5. Есть ли ООП
- интерфейсы без классов
- возможность случайно реализовать интерфейс
- встраивание как замена наследованию
- нет методов - нет перегрузки
6. Есть обобщенное программирование
- нет и в версии 1.x не будет 
- есть и активно используется
8. Многопоточность
- 
9. Reflection
- 
10. Для чего нужен Go